#!/usr/bin/env bash
set -eo pipefail
echo "---> Salesforce Node.js Function Buildpack"

BP_DIR=$(cd $(dirname $0)/..; pwd)
LAYERS_DIR="$1"
MW_LAYER="$LAYERS_DIR/middleware"
BUILD_DIR=$(pwd)

# Get the package name of the user function, to allow it to be required by name
SF_FUNCTION_PACKAGE_NAME=$(jq -r '.name // empty' < "$BUILD_DIR/package.json")
if [[ -z "${SF_FUNCTION_PACKAGE_NAME}" ]]; then
  echo "Salesforce function package name not defined. Make sure there is a 'name' in package.json."
  exit 1
fi
# Remove the user function package symlink if present from previous build
rm -f "${MW_LAYER}/node_modules/${SF_FUNCTION_PACKAGE_NAME}"

# Setup caching layer for middleware node_modules
NODE_MODULES_DIR="${LAYERS_DIR}/node_modules" # the actual layer where the caching values are saved to
touch "${NODE_MODULES_DIR}.toml"              # the layer toml file that tells lifecycle to enable cache
mkdir -p "${NODE_MODULES_DIR}"

# Create directory where ENV vars will be defined
mkdir -p "$MW_LAYER/env"

#BP_DIR has all the files that's untared from the buildpack targz
#copy all the source files to MW_LAYER folder
cp -a "$BP_DIR/middleware/." $MW_LAYER

local_lock_checksum=$(sha256sum "${MW_LAYER}/package-lock.json" | cut -d " " -f 1)
cached_lock_checksum=$(yj -t < "${NODE_MODULES_DIR}.toml" | jq -r ".metadata.package_lock_checksum")

local_stack=${CNB_STACK_ID}
cached_stack=$(yj -t < "${NODE_MODULES_DIR}.toml" | jq -r ".metadata.stack")

if [ "$local_lock_checksum" == "$cached_lock_checksum" ] && [ "$local_stack" == "$cached_stack" ] ; then
    echo "---> Reusing previous node_modules and dist artifacts from cache"
    cp -r "${NODE_MODULES_DIR}/." "${MW_LAYER}/node_modules"
else

    # Save node_modules.toml
    echo "cache = true" > "${NODE_MODULES_DIR}.toml"
    {
      echo "build = false"
      echo "launch = false"
      echo -e "[metadata]"
      echo -e "package_lock_checksum = \"$local_lock_checksum\""
      echo -e "stack = \"$local_stack\""
    } >> "${NODE_MODULES_DIR}.toml"

    pushd $MW_LAYER
      npm install --only=production
    popd
    cp -r "${MW_LAYER}/node_modules/." "${NODE_MODULES_DIR}"
fi

# Install the user function as a middleware dependency, so it can be required
if [[ -d "$MW_LAYER/node_modules/$SF_FUNCTION_PACKAGE_NAME" ]]; then
  echo "Salesforce function package name($SF_FUNCTION_PACKAGE_NAME) conflicts with existing module. Change the 'name' in package.json."
  exit 1
fi
echo "---> Installing $SF_FUNCTION_PACKAGE_NAME"
echo -n "$SF_FUNCTION_PACKAGE_NAME" > "$MW_LAYER/env/SF_FUNCTION_PACKAGE_NAME.override"
ln -s "$BUILD_DIR" "$MW_LAYER/node_modules/$SF_FUNCTION_PACKAGE_NAME"

mkdir -p "$MW_LAYER/env.launch"
if [[ ! -z "${DEBUG_PORT}" ]]; then
  echo -n "--inspect=0.0.0.0:${DEBUG_PORT}" > "$MW_LAYER/env.launch/NODE_OPTIONS.override"
fi
echo "launch = true" > "$MW_LAYER.toml"

# test that we can load the user function
echo "require('$MW_LAYER/dist/userFnLoader').default('$SF_FUNCTION_PACKAGE_NAME')" | node
